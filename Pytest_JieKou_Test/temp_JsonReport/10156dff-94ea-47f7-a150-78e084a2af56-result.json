{"name": "test_selectTags[args0]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <testcase.user_tags.test_selectTags.Test_userTag object at 0x000001F1CEF23848>\nargs = {'caseName': '【查询用户标签接口】用例3：参数正确', 'excepted': {'text1': '星标组', 'text2': 'tags'}, 'method': 'get', 'statusCode': 200, ...}\nsession_fixture = '80_X82t0TCzj4kqvz_hPUNm_fwwH6n5C02pX2-TiwEO29cTixMpxdwrzI6VtbvtcfIt25uj478i0demenIv-ZIgYwQKZIQZ9vzepHSTWxF5JUIdb2fbL24UKOPp12AELIdAGAVCZ'\n\n    @pytest.mark.parametrize('args', read_testCase('user_tags\\\\select_tags.yaml'))\n    @allure.story(\"获取用户标签接口\")\n    def test_selectTags(self, args, session_fixture):\n        token = session_fixture\n        with allure.step(\"执行接口：\"):\n            body = requests_def(args['method'], url=read_config(\"env\", \"test\") + args['url'],\n                                params={'access_token': token}\n                                )\n            assret_statusCode(args['caseName'], body.status_code, args['statusCode'])\n    \n        with allure.step(\"断言响应体\"):\n            if \"errcode\" and \"errmsg\" in body.json():\n                with allure.step(\"errcode是否与预期结果一致\"):\n                    assret_body(args['caseName'], body, 'errcode', args['excepted']['errcode'])\n                with allure.step(\"errmsg是否与预期结果一致\"):\n                    assret_in_text(args['caseName'], body.json(), args['excepted']['errmsg'])\n            else:\n                with allure.step(\"响应结果是否包含相关数据\"):\n>                   assret_in_text(args['caseName'], body.json(), args['excepted']['text1'])\n\ntestcase\\user_tags\\test_selectTags.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\Assert.py:38: in assret_in_text\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncaseName = '【查询用户标签接口】用例3：参数正确'\nbody_json = {'tags': [{'count': 2, 'id': 2, 'name': '星标组'}, {'count': 0, 'id': 437, 'name': '6NAhh'}, {'count': 0, 'id': 446, 'nam...me': 'n6xrg4uVm6ZyjxX'}, {'count': 0, 'id': 468, 'name': 'R2rhh'}, {'count': 0, 'id': 470, 'name': 'yAClJCq5BO'}, ...]}\nassret_info = '星标组'\n\n    def assret_in_text(caseName, body_json, assret_info):\n        # caseName：测试用例名称\n        # boby：响应body\n        # assret_msg： 预期结果\n        try:\n            # text： 响应body转换为字符串类型的（实际结果）\n            text = json.dumps(body_json)\n            # print(\"text的值是：\",text)\n>           assert assret_info in text\nE           AssertionError\n\ncommon\\Assert.py:30: AssertionError"}, "steps": [{"name": "执行接口：", "status": "passed", "start": 1715834350411, "stop": 1715834350701}, {"name": "断言响应体", "status": "failed", "statusDetails": {"message": "AssertionError\n", "trace": "  File \"D:\\Python_Code\\Pytest_JieKou_Test\\testcase\\user_tags\\test_selectTags.py\", line 30, in test_selectTags\n    assret_in_text(args['caseName'], body.json(), args['excepted']['text1'])\n  File \"D:\\Python_Code\\Pytest_JieKou_Test\\common\\Assert.py\", line 38, in assret_in_text\n    raise e\n  File \"D:\\Python_Code\\Pytest_JieKou_Test\\common\\Assert.py\", line 30, in assret_in_text\n    assert assret_info in text\n"}, "steps": [{"name": "响应结果是否包含相关数据", "status": "failed", "statusDetails": {"message": "AssertionError\n", "trace": "  File \"D:\\Python_Code\\Pytest_JieKou_Test\\testcase\\user_tags\\test_selectTags.py\", line 30, in test_selectTags\n    assret_in_text(args['caseName'], body.json(), args['excepted']['text1'])\n  File \"D:\\Python_Code\\Pytest_JieKou_Test\\common\\Assert.py\", line 38, in assret_in_text\n    raise e\n  File \"D:\\Python_Code\\Pytest_JieKou_Test\\common\\Assert.py\", line 30, in assret_in_text\n    assert assret_info in text\n"}, "start": 1715834350701, "stop": 1715834350729}], "start": 1715834350701, "stop": 1715834350729}], "attachments": [{"name": "log", "source": "2cc9bb67-35ef-4a4a-b0af-c096e4493479-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "args", "value": "{'caseName': '【查询用户标签接口】用例3：参数正确', 'method': 'get', 'url': '/cgi-bin/tags/get', 'excepted': {'text1': '星标组', 'text2': 'tags'}, 'statusCode': 200}"}], "start": 1715834350411, "stop": 1715834350729, "uuid": "01c00ec4-d7ad-4ea7-be2d-6e40cce50d33", "historyId": "d59403c75c882a619fac4d4abcdb8970", "testCaseId": "e945fc3140c79affdce4738a1749c2a5", "fullName": "testcase.user_tags.test_selectTags.Test_userTag#test_selectTags", "labels": [{"name": "epic", "value": "微信项目"}, {"name": "story", "value": "获取用户标签接口"}, {"name": "feature", "value": "用户标签管理模块"}, {"name": "parentSuite", "value": "testcase.user_tags"}, {"name": "suite", "value": "test_selectTags"}, {"name": "subSuite", "value": "Test_userTag"}, {"name": "host", "value": "DESKTOP-IG8PJM0"}, {"name": "thread", "value": "4692-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.user_tags.test_selectTags"}]}