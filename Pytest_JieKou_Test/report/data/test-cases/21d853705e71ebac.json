{
  "uid" : "21d853705e71ebac",
  "name" : "test_selectTags[args0]",
  "fullName" : "testcase.user_tags.test_selectTags.Test_userTag#test_selectTags",
  "historyId" : "d59403c75c882a619fac4d4abcdb8970",
  "time" : {
    "start" : 1715834350411,
    "stop" : 1715834350729,
    "duration" : 318
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <testcase.user_tags.test_selectTags.Test_userTag object at 0x000001F1CEF23848>\nargs = {'caseName': '【查询用户标签接口】用例3：参数正确', 'excepted': {'text1': '星标组', 'text2': 'tags'}, 'method': 'get', 'statusCode': 200, ...}\nsession_fixture = '80_X82t0TCzj4kqvz_hPUNm_fwwH6n5C02pX2-TiwEO29cTixMpxdwrzI6VtbvtcfIt25uj478i0demenIv-ZIgYwQKZIQZ9vzepHSTWxF5JUIdb2fbL24UKOPp12AELIdAGAVCZ'\n\n    @pytest.mark.parametrize('args', read_testCase('user_tags\\\\select_tags.yaml'))\n    @allure.story(\"获取用户标签接口\")\n    def test_selectTags(self, args, session_fixture):\n        token = session_fixture\n        with allure.step(\"执行接口：\"):\n            body = requests_def(args['method'], url=read_config(\"env\", \"test\") + args['url'],\n                                params={'access_token': token}\n                                )\n            assret_statusCode(args['caseName'], body.status_code, args['statusCode'])\n    \n        with allure.step(\"断言响应体\"):\n            if \"errcode\" and \"errmsg\" in body.json():\n                with allure.step(\"errcode是否与预期结果一致\"):\n                    assret_body(args['caseName'], body, 'errcode', args['excepted']['errcode'])\n                with allure.step(\"errmsg是否与预期结果一致\"):\n                    assret_in_text(args['caseName'], body.json(), args['excepted']['errmsg'])\n            else:\n                with allure.step(\"响应结果是否包含相关数据\"):\n>                   assret_in_text(args['caseName'], body.json(), args['excepted']['text1'])\n\ntestcase\\user_tags\\test_selectTags.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\Assert.py:38: in assret_in_text\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncaseName = '【查询用户标签接口】用例3：参数正确'\nbody_json = {'tags': [{'count': 2, 'id': 2, 'name': '星标组'}, {'count': 0, 'id': 437, 'name': '6NAhh'}, {'count': 0, 'id': 446, 'nam...me': 'n6xrg4uVm6ZyjxX'}, {'count': 0, 'id': 468, 'name': 'R2rhh'}, {'count': 0, 'id': 470, 'name': 'yAClJCq5BO'}, ...]}\nassret_info = '星标组'\n\n    def assret_in_text(caseName, body_json, assret_info):\n        # caseName：测试用例名称\n        # boby：响应body\n        # assret_msg： 预期结果\n        try:\n            # text： 响应body转换为字符串类型的（实际结果）\n            text = json.dumps(body_json)\n            # print(\"text的值是：\",text)\n>           assert assret_info in text\nE           AssertionError\n\ncommon\\Assert.py:30: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "session_fixture",
    "time" : {
      "start" : 1715834313483,
      "stop" : 1715834313488,
      "duration" : 5
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <testcase.user_tags.test_selectTags.Test_userTag object at 0x000001F1CEF23848>\nargs = {'caseName': '【查询用户标签接口】用例3：参数正确', 'excepted': {'text1': '星标组', 'text2': 'tags'}, 'method': 'get', 'statusCode': 200, ...}\nsession_fixture = '80_X82t0TCzj4kqvz_hPUNm_fwwH6n5C02pX2-TiwEO29cTixMpxdwrzI6VtbvtcfIt25uj478i0demenIv-ZIgYwQKZIQZ9vzepHSTWxF5JUIdb2fbL24UKOPp12AELIdAGAVCZ'\n\n    @pytest.mark.parametrize('args', read_testCase('user_tags\\\\select_tags.yaml'))\n    @allure.story(\"获取用户标签接口\")\n    def test_selectTags(self, args, session_fixture):\n        token = session_fixture\n        with allure.step(\"执行接口：\"):\n            body = requests_def(args['method'], url=read_config(\"env\", \"test\") + args['url'],\n                                params={'access_token': token}\n                                )\n            assret_statusCode(args['caseName'], body.status_code, args['statusCode'])\n    \n        with allure.step(\"断言响应体\"):\n            if \"errcode\" and \"errmsg\" in body.json():\n                with allure.step(\"errcode是否与预期结果一致\"):\n                    assret_body(args['caseName'], body, 'errcode', args['excepted']['errcode'])\n                with allure.step(\"errmsg是否与预期结果一致\"):\n                    assret_in_text(args['caseName'], body.json(), args['excepted']['errmsg'])\n            else:\n                with allure.step(\"响应结果是否包含相关数据\"):\n>                   assret_in_text(args['caseName'], body.json(), args['excepted']['text1'])\n\ntestcase\\user_tags\\test_selectTags.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\Assert.py:38: in assret_in_text\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncaseName = '【查询用户标签接口】用例3：参数正确'\nbody_json = {'tags': [{'count': 2, 'id': 2, 'name': '星标组'}, {'count': 0, 'id': 437, 'name': '6NAhh'}, {'count': 0, 'id': 446, 'nam...me': 'n6xrg4uVm6ZyjxX'}, {'count': 0, 'id': 468, 'name': 'R2rhh'}, {'count': 0, 'id': 470, 'name': 'yAClJCq5BO'}, ...]}\nassret_info = '星标组'\n\n    def assret_in_text(caseName, body_json, assret_info):\n        # caseName：测试用例名称\n        # boby：响应body\n        # assret_msg： 预期结果\n        try:\n            # text： 响应body转换为字符串类型的（实际结果）\n            text = json.dumps(body_json)\n            # print(\"text的值是：\",text)\n>           assert assret_info in text\nE           AssertionError\n\ncommon\\Assert.py:30: AssertionError",
    "steps" : [ {
      "name" : "执行接口：",
      "time" : {
        "start" : 1715834350411,
        "stop" : 1715834350701,
        "duration" : 290
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "断言响应体",
      "time" : {
        "start" : 1715834350701,
        "stop" : 1715834350729,
        "duration" : 28
      },
      "status" : "failed",
      "statusMessage" : "AssertionError\n",
      "statusTrace" : "  File \"D:\\Python_Code\\Pytest_JieKou_Test\\testcase\\user_tags\\test_selectTags.py\", line 30, in test_selectTags\n    assret_in_text(args['caseName'], body.json(), args['excepted']['text1'])\n  File \"D:\\Python_Code\\Pytest_JieKou_Test\\common\\Assert.py\", line 38, in assret_in_text\n    raise e\n  File \"D:\\Python_Code\\Pytest_JieKou_Test\\common\\Assert.py\", line 30, in assret_in_text\n    assert assret_info in text\n",
      "steps" : [ {
        "name" : "响应结果是否包含相关数据",
        "time" : {
          "start" : 1715834350701,
          "stop" : 1715834350729,
          "duration" : 28
        },
        "status" : "failed",
        "statusMessage" : "AssertionError\n",
        "statusTrace" : "  File \"D:\\Python_Code\\Pytest_JieKou_Test\\testcase\\user_tags\\test_selectTags.py\", line 30, in test_selectTags\n    assret_in_text(args['caseName'], body.json(), args['excepted']['text1'])\n  File \"D:\\Python_Code\\Pytest_JieKou_Test\\common\\Assert.py\", line 38, in assret_in_text\n    raise e\n  File \"D:\\Python_Code\\Pytest_JieKou_Test\\common\\Assert.py\", line 30, in assret_in_text\n    assert assret_info in text\n",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : true,
        "stepsCount" : 0,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 1,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "2befd9d718f14fb0",
      "name" : "log",
      "source" : "2befd9d718f14fb0.txt",
      "type" : "text/plain",
      "size" : 5631
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 3,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "session_fixture::0",
    "time" : {
      "start" : 1715834355115,
      "stop" : 1715834355115,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "epic",
    "value" : "微信项目"
  }, {
    "name" : "story",
    "value" : "获取用户标签接口"
  }, {
    "name" : "feature",
    "value" : "用户标签管理模块"
  }, {
    "name" : "parentSuite",
    "value" : "testcase.user_tags"
  }, {
    "name" : "suite",
    "value" : "test_selectTags"
  }, {
    "name" : "subSuite",
    "value" : "Test_userTag"
  }, {
    "name" : "host",
    "value" : "DESKTOP-IG8PJM0"
  }, {
    "name" : "thread",
    "value" : "4692-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcase.user_tags.test_selectTags"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "args",
    "value" : "{'caseName': '【查询用户标签接口】用例3：参数正确', 'method': 'get', 'url': '/cgi-bin/tags/get', 'excepted': {'text1': '星标组', 'text2': 'tags'}, 'statusCode': 200}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "21d853705e71ebac.json",
  "parameterValues" : [ "{'caseName': '【查询用户标签接口】用例3：参数正确', 'method': 'get', 'url': '/cgi-bin/tags/get', 'excepted': {'text1': '星标组', 'text2': 'tags'}, 'statusCode': 200}" ]
}